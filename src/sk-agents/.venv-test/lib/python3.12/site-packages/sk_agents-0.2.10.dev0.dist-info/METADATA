Metadata-Version: 2.4
Name: sk-agents
Version: 0.2.10.dev0
Summary: Teal Agents - Core Agent Framework
Project-URL: Homepage, https://github.com/MSDLLCpapers/teal-agents
Project-URL: Repository, https://github.com/MSDLLCpapers/teal-agents
Requires-Python: <3.14,>=3.12
Requires-Dist: a2a-sdk==0.2.4
Requires-Dist: anthropic
Requires-Dist: boto3
Requires-Dist: fastapi[standard]
Requires-Dist: google-ai-generativelanguage>=0.6.15
Requires-Dist: google-generativeai>=0.8.5
Requires-Dist: lock
Requires-Dist: mcp>=1.0.0
Requires-Dist: opentelemetry-exporter-otlp-proto-grpc
Requires-Dist: pydantic
Requires-Dist: pydantic-yaml
Requires-Dist: pygithub
Requires-Dist: python-dotenv
Requires-Dist: pyyaml
Requires-Dist: redis>=6.0.0
Requires-Dist: semantic-kernel==1.33.0
Requires-Dist: ska-utils
Description-Content-Type: text/markdown

# Teal Agents Framework

Teal Agent Framework is a (early!) prototype framework meant to accelerate the
creation and deployment of AI-powered agents. The framework is built on top of
Microsoft's
[Semantic Kernel](https://learn.microsoft.com/en-us/semantic-kernel/overview/),
a lightweight, open source, agent framework.

Building upon Semantic Kernel, the Teal Agent Framework takes a config-first
approach to the creation of agents. The majority of setup is performed in an
agent's configuration file and you have the option to add in custom code to
enhance your agent's capability.

## ⚠️ Deprecation Notice

**A2A (Agent-to-Agent) Functionality Deprecated**: As part of ongoing framework migration evaluation, A2A functionality in AppV2 (`skagents/v2alpha1`) is being deprecated. The A2A feature set was experimental and never fully fleshed out or stabilized for production use. While existing A2A implementations will continue to function for backward compatibility, new development should avoid using A2A functionality. The A2A feature set is no longer actively developed or enhanced.

## Prerequisites
- Python 3.11 or higher
- An appropriate API key for the LLM of your choice
- Docker (or comparable equivalent)

## Running a simple demo
Running locally will allow you to test your agent's configuration and code.
First, clone the repository locally and install all dependencies. In this
I'm using `uv` as an environment manager.

```bash
$ git clone https://github.com/MSDLLCpapers/teal-agents
$ cd teal-agents/src/sk-agents
$ uv sync
```

Once cloned, you'll need to set up an environment file which will provide your
LLM API key and point to the correct agent configuration file. Create a `.env`
file in the root of the repository and add the following:

```text
TA_API_KEY=<your-API-key>
TA_SERVICE_CONFIG=demos/01_getting_started/config.yaml
```

Finally, start the agent using fastapi via either using `uv run` or after
activating your environment.

```bash
$ uv run -- fastapi run src/sk_agents/app.py
```
or
```bash
$ source .venv/bin/activate
$ fastapi run src/sk_agents/app.py
```


You can test the agent by visiting http://localhost:8000/docs

![Agent Swagger UI](doc/assets/demo-1.png)

### Additional Documentation
- [Configuring an Agent](/src/sk-agents/demos/01_getting_started/README.md)
- [Working with Input and Output](/src/sk-agents/demos/02_input_output/README.md)
- [Creating Custom Plugins](/src/sk-agents/demos/03_plugins/README.md)
- [Using Remote Plugins](/src/sk-agents/demos/04_remote_plugins/README.md)
- [Docker Deployment (Basic)](/src/sk-agents/demos/05_deployment/README.md)
- [Github Deployment](/src/sk-agents/demos/06_deployment_github/README.md)
- [Task Output](/src/sk-agents/demos/07_task_output/README.md)
- [Multi-Modal Input](/src/sk-agents/demos/08_multi_modal/README.md)
