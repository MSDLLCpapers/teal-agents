# ============================================================================
# Teal Agents Production Environment Configuration
# ============================================================================
# Copy this file to .env and fill in your values
# 
# SECURITY: Never commit .env files with real credentials to git!
# ============================================================================

# ----------------------------------------------------------------------------
# CORE CONFIGURATION
# ----------------------------------------------------------------------------

# Path to agent configuration YAML file
TA_SERVICE_CONFIG=/app/config/production-agent-config.yaml

# API key for LLM provider (OpenAI, Azure OpenAI, etc.)
TA_API_KEY=sk-your-openai-api-key-here

# OpenAI API key (if using OpenAI)
OPENAI_API_KEY=sk-your-openai-api-key-here

# Azure OpenAI configuration (if using Azure)
# AZURE_OPENAI_ENDPOINT=https://your-resource.openai.azure.com/
# AZURE_OPENAI_API_KEY=your-azure-key
# AZURE_OPENAI_DEPLOYMENT_NAME=gpt-4

# ----------------------------------------------------------------------------
# MICROSOFT ENTRA ID (AZURE AD) AUTHENTICATION
# ----------------------------------------------------------------------------
# Required for production SSO authentication

# Your Entra tenant ID (Directory ID from Azure Portal)
TA_ENTRA_TENANT_ID=your-tenant-id-here

# Your application's client ID (Application ID from Azure Portal)
TA_ENTRA_CLIENT_ID=your-client-id-here

# Entra authority URL (optional, defaults to public cloud)
# TA_ENTRA_AUTHORITY=https://login.microsoftonline.com/your-tenant-id

# ----------------------------------------------------------------------------
# AUTHORIZER CONFIGURATION
# ----------------------------------------------------------------------------
# Module and class for request authorization

# For production with Entra ID:
TA_AUTHORIZER_MODULE=src/sk_agents/authorization/entra_authorizer.py
TA_AUTHORIZER_CLASS=EntraAuthorizer

# For development/testing:
# TA_AUTHORIZER_MODULE=src/sk_agents/authorization/dummy_authorizer.py
# TA_AUTHORIZER_CLASS=DummyAuthorizer

# ----------------------------------------------------------------------------
# ARCADE INTEGRATION
# ----------------------------------------------------------------------------

# Arcade API key (from Arcade Dashboard > Settings > API Keys)
ARCADE_API_KEY=arc_your-project-api-key-here

# Arcade gateway URL (optional, can be in agent config YAML)
# ARCADE_GATEWAY_URL=https://api.arcade.dev/mcp/your-gateway-slug

# ----------------------------------------------------------------------------
# REDIS (STATE MANAGEMENT)
# ----------------------------------------------------------------------------
# Required for multi-instance deployments

# Redis host
TA_REDIS_HOST=localhost

# Redis port
TA_REDIS_PORT=6379

# Redis password (if authentication enabled)
# TA_REDIS_PWD=your-redis-password

# Redis database number
# TA_REDIS_DB=0

# Redis SSL/TLS (true for production)
# TA_REDIS_SSL=true

# ----------------------------------------------------------------------------
# STATE MANAGEMENT
# ----------------------------------------------------------------------------

# State management backend: "in-memory" or "redis"
TA_STATE_MANAGEMENT=redis

# Persistence module and class
TA_PERSISTENCE_MODULE=persistence/redis_persistence_manager.py
TA_PERSISTENCE_CLASS=RedisPersistenceManager

# ----------------------------------------------------------------------------
# LOGGING & MONITORING
# ----------------------------------------------------------------------------

# Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Structured logging format (json or text)
# LOG_FORMAT=json

# Enable OpenTelemetry tracing
# TELEMETRY_ENABLED=true

# OTLP endpoint for traces/metrics
# OTLP_ENDPOINT=https://your-observability-platform.com

# ----------------------------------------------------------------------------
# CORS CONFIGURATION
# ----------------------------------------------------------------------------
# Required if web UI accesses API from different domain

# Comma-separated list of allowed origins
# TA_CORS_ORIGINS=https://app.company.com,https://admin.company.com

# Or allow all (development only!)
# TA_CORS_ORIGINS=*

# ----------------------------------------------------------------------------
# HEALTH CHECKS
# ----------------------------------------------------------------------------

# Enable health check endpoints (/health, /ready)
ENABLE_HEALTH_CHECKS=true

# Health check timeout for external services (seconds)
HEALTH_CHECK_TIMEOUT=5

# ----------------------------------------------------------------------------
# RATE LIMITING (OPTIONAL)
# ----------------------------------------------------------------------------

# Enable rate limiting
# ENABLE_RATE_LIMITING=true

# Requests per minute per user
# RATE_LIMIT_PER_USER=60

# ----------------------------------------------------------------------------
# FEATURE FLAGS
# ----------------------------------------------------------------------------

# Enable MCP plugin system
ENABLE_MCP_PLUGINS=true

# Enable HITL (Human-in-the-Loop) governance
ENABLE_HITL=true

# Enable tool catalog
ENABLE_TOOL_CATALOG=true

# ----------------------------------------------------------------------------
# AGENT-TO-AGENT (A2A) CONFIGURATION
# ----------------------------------------------------------------------------
# DEPRECATED: A2A features are being evaluated for framework migration
# These configs maintained for backward compatibility only

TA_A2A_ENABLED=false
TA_AGENT_BASE_URL=http://localhost:8000
TA_PROVIDER_ORG=My Organization
TA_PROVIDER_URL=http://localhost:8000
# TA_A2A_OUTPUT_CLASSIFIER_MODEL=gpt-4o-mini

# ----------------------------------------------------------------------------
# PLUGIN CATALOG
# ----------------------------------------------------------------------------

# Plugin catalog module and class
TA_PLUGIN_CATALOG_MODULE=src/sk_agents/plugin_catalog/local_plugin_catalog.py
TA_PLUGIN_CATALOG_CLASS=FileBasedPluginCatalog
TA_PLUGIN_CATALOG_FILE=src/sk_agents/plugin_catalog/catalog.json

# ----------------------------------------------------------------------------
# AUTH STORAGE (OAUTH TOKEN CACHE)
# ----------------------------------------------------------------------------

# Auth storage manager (for caching OAuth tokens)
# TA_AUTH_STORAGE_MANAGER_MODULE=src/sk_agents/auth_storage/redis_auth_storage_manager.py
# TA_AUTH_STORAGE_MANAGER_CLASS=RedisAuthStorageManager

# ----------------------------------------------------------------------------
# PRODUCTION SECURITY
# ----------------------------------------------------------------------------

# Allowed hosts (comma-separated)
# ALLOWED_HOSTS=agents.company.com,api.agents.company.com

# Secret key for sessions (generate with: python -c "import secrets; print(secrets.token_hex(32))")
# SECRET_KEY=your-secret-key-here

# Session timeout (seconds)
# SESSION_TIMEOUT=3600

# HTTPS only (recommended for production)
# FORCE_HTTPS=true

# ----------------------------------------------------------------------------
# NOTES
# ----------------------------------------------------------------------------
# 1. All sensitive values (API keys, passwords) should be managed via
#    secret management systems (Azure Key Vault, AWS Secrets Manager, etc.)
#
# 2. For Kubernetes deployments, use Secrets and ConfigMaps instead of .env
#
# 3. Validate configuration at startup using production_validator.py
#
# 4. Monitor application logs for configuration warnings/errors
#
# 5. Arcade OAuth Custom Verifier URL: https://your-domain.com/auth/arcade/verify
#    Configure this in Arcade Dashboard > Auth > Settings
#
# 6. For multi-instance deployments, Redis is REQUIRED for state management
#
# 7. Entra ID tokens typically expire after 1 hour - implement token refresh
#
# 8. Per-user MCP discovery caches are in-memory by default; use Redis
#    for multi-instance deployments (future enhancement)
# ============================================================================

